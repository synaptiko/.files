#!/usr/bin/env node
const yaml = require('js-yaml')
const fs = require('fs')
const childProcess = require('child_process')
const path = require('path')
const colorSchemeFile = path.join(__dirname, 'gruvbox/colors.yml')
const swaySchemeFile = path.join(__dirname, 'gruvbox/sway.yml')
const sourceConfigFile = path.join(__dirname, 'configs/source-sway.config')
const destinationConfigFile = path.join(__dirname, `configs/sway.config`)
const theme = process.argv[2] || 'dark'

function loadYaml(yamlFile) {
	try {
		return yaml.safeLoad(fs.readFileSync(yamlFile, { encoding: 'utf8' }))
	} catch (e) {
		console.error(`Error while loading ${yamlFile}`)
		throw e
	}
}

const colorScheme = loadYaml(colorSchemeFile).colors
const swayScheme = loadYaml(swaySchemeFile)
const newSwayColors = swayScheme[theme]
const swayConfig = fs.readFileSync(sourceConfigFile, { encoding: 'utf8' })

const colorVariableList = Object.keys(newSwayColors).reduce((list, variableName) => {
	const schemeColorName = newSwayColors[variableName]
	list.push([variableName, colorScheme[schemeColorName]])
	return list
}, [])

const newSwayConfig = [
	`# DO NOT EDIT THIS FILE DIRECTLY! IT'S GENERATED FROM ${sourceConfigFile}, EDIT IT THERE`,
	...colorVariableList.map(([ variableName, color ]) => {
		return `set $${variableName} ${color}`
	}),
	swayConfig.split('# -- THEME MARKER -- #')[1]
].join('\n')

fs.writeFileSync(destinationConfigFile, newSwayConfig, { encoding: 'utf8' })

if (process.env.SWAYSOCK) {
	newSwayConfig.split('\n').reduce((state, line) => {
		if (line.startsWith('set ')) {
			const parts = line.split(' ');
			state.vars[parts[1]] = parts[2];
		} else if (line.startsWith('client.')) {
			const parts = line.split(/\s+/g).map(part => state.vars.hasOwnProperty(part) ? state.vars[part] : part);
			childProcess.execSync(`swaymsg "${parts.join(' ')}"`)
		} else if (line.startsWith('bar ')) {
			state.barBlock = true;
			state.barNr = parseInt(line.replace(/^bar ([0-9]+).*$/, '$1'), 10);
		} else if (line === '\tcolors {') {
			state.colorsBlock = true;
		} else if (state.colorsBlock && line === '\t}') {
			state.colorsBlock = false;
		} else if (state.barBlock && line === '}') {
			state.barBlock = false;
			state.barNr = undefined;
		} else if (state.barBlock && state.colorsBlock && line.startsWith('\t\t') && line.includes('$')) {
			const parts = line.split(/\s+/g).map(part => state.vars.hasOwnProperty(part) ? state.vars[part] : part);
			childProcess.execSync(`swaymsg "bar '${state.barNr}' colors ${parts.join(' ').trim()}"`)
		}
		return state
	}, { vars: {}, barNr: undefined, barBlock: false, colorsBlock: false })
}
